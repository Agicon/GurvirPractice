"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var generateId_1 = require("../../common/generateId");
function applyServerSniffer(original, effect, debug) {
    if (debug === void 0) { debug = false; }
    var originalCreateServer = original.createServer;
    function createServer(originalOptions, originalListener) {
        var options;
        var listener;
        if (typeof originalOptions === 'undefined') {
            options = {};
            listener = function () { };
        }
        else if (typeof originalOptions === 'function') {
            options = {};
            listener = originalOptions;
        }
        else {
            options = originalOptions;
            listener = originalListener || (function () { });
        }
        var spy = function (req, res) {
            try {
                var id_1 = generateId_1.default();
                var originalWrite_1 = res.write;
                var originalEnd_1 = res.end;
                var originalSet_1 = res.setHeader;
                var buffers_1 = {
                    request: '',
                    response: '',
                };
                var headers_1 = {};
                req.on('data', function (chunk) {
                    buffers_1.request += chunk;
                });
                req.on('end', function () {
                    effect({
                        id: id_1,
                        type: 'incoming',
                        request: {
                            body: buffers_1.request,
                        },
                    });
                    if (debug) {
                        console.log('send request body for', id_1);
                    }
                });
                res.write = function (chunk) {
                    buffers_1.response += chunk;
                    return originalWrite_1.apply(this, arguments);
                };
                res.end = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (typeof args[0] !== 'function') {
                        var chunk = args[0];
                        buffers_1.response += chunk;
                    }
                    return originalEnd_1.apply(this, arguments);
                };
                res.setHeader = function (name, value) {
                    var _a;
                    Object.assign(headers_1, (_a = {}, _a[name] = value, _a));
                    return originalSet_1.apply(this, arguments);
                };
                res.on('finish', function () {
                    effect({
                        id: id_1,
                        type: 'incoming',
                        response: Object.assign({}, res, {
                            time: Date.now(),
                            body: buffers_1.response,
                            headers: headers_1,
                        }),
                    });
                    if (debug) {
                        console.log('send response for', id_1);
                    }
                });
                effect({
                    id: id_1,
                    type: 'incoming',
                    request: Object.assign({}, req, {
                        time: Date.now(),
                        body: buffers_1.request,
                    }),
                });
                if (debug) {
                    console.log('send request for', id_1);
                }
            }
            catch (e) {
                console.log(e);
            }
            return listener(req, res);
        };
        var server = originalCreateServer(options, spy);
        return server;
    }
    if (original === http) {
        return createServer;
    }
    return createServer;
}
exports.default = applyServerSniffer;
//# sourceMappingURL=applyServerSniffer.js.map